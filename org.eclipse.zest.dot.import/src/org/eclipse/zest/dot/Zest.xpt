«REM» 
/*******************************************************************************
 * Copyright (c) 2009 Fabian Steeg. All rights reserved. This program and the
 * accompanying materials are made available under the terms of the Eclipse
 * Public License v1.0 which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors: Fabian Steeg - initial API and implementation; see bug 277380
 *******************************************************************************/ 
«ENDREM»
«IMPORT dot»
«EXTENSION dotlib»
«EXTENSION org::openarchitectureware::util::stdlib::io»
«EXTENSION org::openarchitectureware::util::stdlib::elementprops»
«REM» Entry point for transformation of a dot meta-model instance to a Zest source file «ENDREM»
«DEFINE main FOR graphvizmodel-» «EXPAND dotFile FOREACH graphs» «ENDDEFINE»
«REM» The main file putting it all together «ENDREM»
«DEFINE dotFile FOR graph»
	«FILE name.toFirstUpper() + ".java"-»
	import org.eclipse.swt.SWT;
	import org.eclipse.swt.layout.FillLayout;
	import org.eclipse.swt.widgets.Composite;
	import org.eclipse.swt.widgets.Display;
	import org.eclipse.swt.widgets.Shell;
	import org.eclipse.zest.core.widgets.Graph;
	import org.eclipse.zest.core.widgets.GraphConnection;
	import org.eclipse.zest.core.widgets.GraphNode;
	import org.eclipse.zest.core.widgets.ZestStyles;
	import org.eclipse.zest.layouts.LayoutStyles;
	import org.eclipse.zest.layouts.algorithms.TreeLayoutAlgorithm;
	/** Zest graph generated from Graphviz DOT file '«filename()»'. */
	public class «name.toFirstUpper()» extends Graph {
	    public «name.toFirstUpper()» (Composite parent, int style) {
	        super(parent, style);
	        «IF type == graphtype::digraph» setConnectionStyle(ZestStyles.CONNECTIONS_DIRECTED); «ENDIF»
	        
	        «EXPAND stmt FOREACH stmts SEPARATOR ""»
	        setLayoutAlgorithm(new TreeLayoutAlgorithm(
	                LayoutStyles.NO_LAYOUT_NODE_RESIZING), true);
	        /* TODO: template support for layout */
	        /* TODO: template support for edge styles */
	    }
	    public String toString() { 
	        return super.toString(); // TODO: new GraphTemplate().generate(this);
	    }
	    public static void main(String[] args) {
	        Display d = new Display();
	        Shell shell = new Shell(d);
	        shell.setText(«name.toFirstUpper()».class.getSimpleName());
	        shell.setLayout(new FillLayout());
	        shell.setSize(100, 150);
	        new «name.toFirstUpper()»(shell, SWT.NONE);
	        shell.open();
	        while (!shell.isDisposed()) {
	            while (!d.readAndDispatch()) { d.sleep(); }
	        }
	    }
	}
	«ENDFILE-»
«ENDDEFINE»
«REM» Expansion of the different DOT statement types: «ENDREM»
«DEFINE stmt FOR stmt»«ENDDEFINE»
«REM» 1. Expansion of node declarations «ENDREM»
«DEFINE stmt FOR node_stmt» GraphNode n«name» = new GraphNode(this, SWT.NONE, 
	«IF attributes.a_list.exists(e|e.name=="label")» «attributes.a_list.select(e|e.name=="label").value.get(0)» 
	«ELSE»"«name»"«ENDIF»); 
«ENDDEFINE»
«REM» 2. Expansion of edges «ENDREM»
«DEFINE stmt FOR edge_stmt_node» 
	/* Connection from n«node_id.name» to «EXPAND edge_target FOREACH edgeRHS»: */
	GraphConnection n«node_id.name»«EXPAND edge_target FOREACH edgeRHS» 
		= new GraphConnection(this, SWT.NONE, n«node_id.name», 
		«EXPAND edge_target FOREACH edgeRHS» );
	«IF attributes.a_list.exists(e|e.name=="label")» n«node_id.name»«EXPAND edge_target FOREACH edgeRHS»
		.setText(«attributes.a_list.select(e|e.name=="label").value.get(0)»);
	«ENDIF»
«ENDDEFINE»
«DEFINE edge_target FOR edgeRHS»«ENDDEFINE»
«DEFINE edge_target FOR edgeRHS_node»n«node.name»«ENDDEFINE»
«REM» TODO: support for multiple target (1->2->3) and using undeclared nodes in edges «ENDREM»